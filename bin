//бинарное дерево 
#include <iostream>
#include <fstream> 
#include <vector>
#include <ctime>
#include <cstdlib>

using namespace std;

struct Node {
    int value;
    Node* left;
    Node* right;

    Node(int value) : value(value), left(nullptr), right(nullptr) {}
};

Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }

    if (value < root->value) {
        root->left = insert(root->left, value);
    }
    else {
        root->right = insert(root->right, value);
    }

    return root;
}

void print_tree_to_file(Node* root, int level, char branch, ofstream& outputFile) {
    if (root == nullptr) {
        return;
    }

    for (int i = 0; i < level; i++) {
        outputFile << "  ";
    }

    outputFile << level << branch << ": " << root->value << endl;

    print_tree_to_file(root->right, level + 1, 'R', outputFile); // Печать правого узла первым
    print_tree_to_file(root->left, level + 1, 'L', outputFile); // Печать левого узла вторым
}

int main() {
    setlocale(LC_ALL, "rus");

    int n;
    cout << "Введите количество чисел: ";
    cin >> n;

    int method;
    cout << "Введите метод ввода чисел (1 - ручной ввод, 2 - случайная генерация): ";
    cin >> method;

    vector<int> numbers;
    if (method == 1) {
        cout << "Введите " << n << " чисел: ";
        for (int i = 0; i < n; i++) {
            int number;
            cin >> number;
            numbers.push_back(number);
        }
    }
    else if (method == 2) {
        srand(time(nullptr));
        for (int i = 0; i < n; i++) {
            int number = rand() % n + 1;
            numbers.push_back(number);
        }
    }
    else {
        cout << "Неверный метод ввода." << endl;
        return 1;
    }

    Node* root = nullptr;
    for (int i = 0; i < numbers.size(); i++) {
        root = insert(root, numbers[i]);
    }

    string filename = "d.txt";

    ofstream outputFile(filename);
    if (!outputFile.is_open()) {
        cout << "Ошибка открытия файла." << endl;
        return 1;
    }

    outputFile << "исходные числа:" << endl;
    for (int i = 0; i < numbers.size(); i++) {
        outputFile << numbers[i] << " ";
    }
    outputFile << endl << endl;

    outputFile << "Построенное бинарное дерево:" << endl;
    print_tree_to_file(root, 0, ' ', outputFile);

    outputFile.close();

    cout << "Дерево записано в " << filename << endl;

    return 0;
}
